# -*- coding: utf-8 -*-
"""Projek 1 - ML Terapan - Predictive Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dc3m4zqk2rJpfEIO88ZB2q5ihQpkKUuH

# IMPORT LIBRARY
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""# LOAD DATASET"""

bmw_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Projek Pertama Machine Learning Terapan Dicoding/BMW_Data.csv')
bmw_data

"""# EDA (EKSPLORATORY DATA ANALYSIS)
Disini saya melihat informasi data mulai dari tipe data masing - masing kolom dan juga jumlah column yang ada.

## Informasi Data
"""

# Melihat informasi data
bmw_data.info()

# Melihat statistik deskriptif data
bmw_data.describe()

# Mengecek apakah ada nilai yang null dalam data
bmw_data.isnull().sum()

"""## Analisis Tren Harga Saham"""

# Mengubah kolom Date menjadi datetime agar dapat melihat tren dari data
bmw_data['Date'] = pd.to_datetime(bmw_data['Date'])

# Mengubah kolom Date menjadi index untuk time series analysis
bmw_data.set_index('Date', inplace=True)

# Plotting the Close price over time
plt.figure(figsize=(14, 7))
plt.plot(bmw_data.index, bmw_data['Close'], label='Close Price', color='blue')
plt.title('Close Price Over Time')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.grid()
plt.show()

"""## Melihat Korelasi antara feature numerik

Disini saya ingin melihat korelasi antar kolom yang dapat memepengaruhi harga saham BMW
"""

# Melihat Korelasi menggunakan matriks korelasi
correlation_matrix = bmw_data.corr().round(2)

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5,)
plt.title('Correlation Matrix')
plt.show()

# Melihat korelasi dengan pairplot
selected_features = ['Close', 'High', 'Low', 'Open', 'Volume']
sns.pairplot(bmw_data[selected_features])
plt.show()

"""# PREPROCESSING DATA

Setelah saya melihat informasi dari dataset tersebut, diketahui tidak ada nilai kosong/null dalam dataset tersebut. sehingga kita akan melanjutkan preprocessing data untuk melihat tren dataset.

## Feature Selection
Dapat dilihat diatas bahwa kolom close, open, low, dan high berkorelasi sangat kuat, sedangkan volume memiliki performa korelasi yang negative terhadapat harga lainnya. Selanjutnya saya ingin memilih kolom "Close" sebagai target prediksi.
"""

# Menghapus kolom Volume
bmw_data.drop(['Volume'], inplace=True, axis=1)
bmw_data.head()

"""## TRAIN TEST SPLIT"""

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Features and target selection
X = bmw_data.drop(['Close'], axis=1)  # Features
y = bmw_data['Close']  # Target

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=321)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## STANDARDISASI"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['Adj_Close', 'High', 'Low', 'Open']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""# MODELLING"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'LinearRegression'])

"""## KNN (K-Nearest Neighbors)"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=12)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""## Random Forest"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor

# buat model prediksi
RF = RandomForestRegressor(n_estimators=45, max_depth=32, random_state=321, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""## LinearRegression"""

from sklearn.linear_model import LinearRegression

LR = LinearRegression()
LR.fit(X_train, y_train)
models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=LR.predict(X_train), y_true=y_train)

"""# EVALUASI MODEL"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','LR'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'LR': LR}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

# Menampilkan 3 data baris untuk diprediksi berdasarkan tiap tiap algoritma model
prediksi = X_test.iloc[:3].copy()
pred_dict = {'y_true':y_test[:3]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

"""## Memilih model untuk visualisasi prediksi harga
Disini saya memilih model yang digunakan berdasarkan hasil matriks MSE yang ada bahwa model LR merupakan model dengan performa MSE yang paling rendah sehingga saya menggunakannya untuk prediksi. Garis merah putus - putus merupakan penanda bahwa prediksi harga dan harga aktual sempurna atau sama.
"""

# Visualisasi prediksi vs aktual untuk model terbaik (Random Forest)
plt.figure(figsize=(12, 6))
y_pred_rf = LR.predict(X_test)
plt.scatter(y_test, y_pred_rf, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Harga Aktual')
plt.ylabel('Harga Prediksi')
plt.title('Random Forest: Prediksi vs Aktual')
plt.tight_layout()
plt.legend()
plt.show()